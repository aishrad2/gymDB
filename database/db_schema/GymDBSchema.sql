-- MySQL Script generated by MySQL Workbench
-- Thu Apr 10 14:00:06 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema gymDB
-- -----------------------------------------------------

CREATE SCHEMA IF NOT EXISTS `gymDB` DEFAULT CHARACTER SET utf8 ;
USE `gymDB` ;

-- -----------------------------------------------------
-- Table `gymDB`.`CurrentUser`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`CurrentUser` (
  `currentUserId` INT NOT NULL,
  `username` VARCHAR(45) NOT NULL)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `gymDB`.`Member`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`Member` (
  memberId INT NOT NULL AUTO_INCREMENT,
  `firstName` VARCHAR(45) NOT NULL,
  `lastName` VARCHAR(45) NOT NULL,
  `dateOfBirth` DATETIME NULL,
  `joinDate` DATETIME NULL,
  `membershipId` INT NULL,
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`memberId`),
  CONSTRAINT `FK_membershipId`
    FOREIGN KEY (`membershipId`)
    REFERENCES `gymDB`.`Membership` (`membershipId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gymDB`.`Employee`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`Employee` (
  `employeeId` INT NOT NULL auto_increment,
  `firstName` VARCHAR(45) NOT NULL,
  `lastName` VARCHAR(45) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(60) NOT NULL,
  `dateOfBirth` DATETIME NULL,
  `phoneNumber` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`employeeId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gymDB`.`Room`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`Room` (
  `roomId` INT NOT NULL auto_increment,
  `roomName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`roomId`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `gymDB`.`FitnessClass`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`FitnessClass` (
  `fitnessClassId` INT NOT NULL AUTO_INCREMENT,
  `fitnessClassName` VARCHAR(45) NOT NULL,
  `fitnessClassType` VARCHAR(45) NOT NULL,
  `startTime` TIME NOT NULL,
  `endTime` TIME NOT NULL,
  `fitnessClassCapacity` INT NOT NULL,
  `employeeId` INT,
  `roomId` INT,
  CHECK (`startTime` < `endTime`), 
  PRIMARY KEY (`fitnessClassId`),
  CONSTRAINT `FK_employeeId`
    FOREIGN KEY (`employeeId`)
    REFERENCES `gymDB`.`Employee` (`employeeId`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `FK_roomId`
    FOREIGN KEY (`roomId`)
    REFERENCES `gymDB`.`Room` (`roomId`)
    ON DELETE SET NULL
    ON UPDATE CASCADE
)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `gymDB`.`Day`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`Day` (
  `dayId` INT NOT NULL AUTO_INCREMENT,
  `dayName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`dayId`)
)
ENGINE = InnoDB;

-- Populate Day table
INSERT INTO gymDB.Day (dayName)
VALUES 
  ('Monday'),
  ('Tuesday'),
  ('Wednesday'),
  ('Thursday'),
  ('Friday'),
  ('Saturday'),
  ('Sunday');

-- -----------------------------------------------------
-- Table `gymDB`.`FitnessClass_Day`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`FitnessClass_Day` (
  `fitnessClassId` INT NOT NULL,
  `dayId` INT NOT NULL,
  PRIMARY KEY (`fitnessClassId`, `dayId`),
  CONSTRAINT `FK_fitnessClassIdVal`
    FOREIGN KEY (`fitnessClassId`)
    REFERENCES `gymDB`.`FitnessClass` (`fitnessClassId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_dayId`
    FOREIGN KEY (`dayId`)
    REFERENCES `gymDB`.`Day` (`dayId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `gymDB`.`MuscleGroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`MuscleGroup` (
  `muscleGroupId` INT NOT NULL AUTO_INCREMENT,
  `muscleGroupName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`muscleGroupId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gymDB`.`Equipment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`Equipment` (
  `equipmentId` INT NOT NULL AUTO_INCREMENT,
  `equipmentName` VARCHAR(45) NOT NULL,
  `quantity` INT NOT NULL,
  `roomId` INT NULL,
  `muscleGroupId` INT NULL,
  PRIMARY KEY (`equipmentId`),
  CONSTRAINT `FK_roomID2`
    FOREIGN KEY (`roomId`)
    REFERENCES `gymDB`.`Room` (`roomId`)
    # Set the room Id to null if the roomId was deleted from the Room table
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `FK_muscleGroupId`
    FOREIGN KEY (`muscleGroupId`)
    REFERENCES `gymDB`.`MuscleGroup` (`muscleGroupId`)
    # No action if the muscleGroupId was deleted from the MuscleGroup table, we want to preserve it either way
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gymDB`.`Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`Role` (
  `roleId` INT NOT NULL AUTO_INCREMENT,
  `roleName` VARCHAR(45) NOT NULL,
  `hourlyWage` INT NOT NULL,
  CHECK (`hourlyWage` > 7),
  PRIMARY KEY (`roleId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gymDB`.`Membership`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`Membership` (
  `membershipId` INT NOT NULL AUTO_INCREMENT,
  `fee` DECIMAL(10,2) NOT NULL,
  `membershipName` VARCHAR(45) NOT NULL,
  `membershipDescription` VARCHAR(255) NOT NULL,
  CHECK (`fee` > 0),
  -- `memberId` INT NOT NULL,
  PRIMARY KEY (`membershipId`)
  -- CONSTRAINT `FK_memberId2`
--     FOREIGN KEY (`memberId`)
--     REFERENCES `gymDB`.`Member` (`memberId`)
--     # Cascade delete the Membership if the memberId was deleted from the Member table
--     ON DELETE CASCADE
--     ON UPDATE CASCADE
) ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gymDB`.`Member_FitnessClass`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`Member_FitnessClass` (
  `memberId` INT NOT NULL AUTO_INCREMENT,
  `fitnessClassId` INT NOT NULL,
  PRIMARY KEY (`memberId`, `fitnessClassId`),
  CONSTRAINT `FK_memberId`
    FOREIGN KEY (`memberId`)
    REFERENCES `gymDB`.`Member` (`memberId`)
	# Cascade delete the member_fitness class entry if a member was deleted from the db
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_fitnessClassId`
    FOREIGN KEY (`fitnessClassId`)
    REFERENCES `gymDB`.`FitnessClass` (`fitnessClassId`)
    # Cascade delete the member_fitness class entry if a fitness class was deleted from the db
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gymDB`.`Employee_Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gymDB`.`Employee_Role` (
  `employeeId` INT NOT NULL AUTO_INCREMENT,
  `roleId` INT NOT NULL,
  PRIMARY KEY (`employeeId`, `roleId`),
  CONSTRAINT `FK_employeeId2`
    FOREIGN KEY (`employeeId`)
    REFERENCES `gymDB`.`Employee` (`employeeId`)
    # Delete the Employee_Role if an employee was deleted from the Employee table
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_roleId`
    FOREIGN KEY (`roleId`)
    REFERENCES `gymDB`.`Role` (`roleId`)
	# Cascade delete the Employee Role if the roleId was deleted from the Role table
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

-- No longer need membership table since member and membership is not a many to many relationship 
-- -- -----------------------------------------------------
-- -- Table `gymDB`.`Membership`
-- -- -----------------------------------------------------
-- CREATE TABLE IF NOT EXISTS `gymDB`.`Membership` (
--   `membershipId` INT NOT NULL,
--   `memberId` INT NOT NULL,
--   `membershipLevelId` INT,
--   PRIMARY KEY (`membershipId`),
--   CONSTRAINT `FK_memberId2`
--     FOREIGN KEY (`memberId`)
--     REFERENCES `gymDB`.`Member` (`memberId`)
--     # Cascade delete the Membership if the memberId was deleted from the Member table
--     ON DELETE CASCADE
--     ON UPDATE CASCADE,
--   CONSTRAINT `FK_membershipLevelId`
--     FOREIGN KEY (`membershipLevelId`)
--     REFERENCES `gymDB`.`MembershipLevel` (`membershipLevelId`)
--     # Set the Membership to Null if the membershipLevelId was deleted from the MembershipLevel table
--     ON DELETE SET NULL
--     ON UPDATE CASCADE)
-- ENGINE = InnoDB;

-- -----------------------------------------------------
-- Create View for all equipment in the gym
-- -----------------------------------------------------
CREATE VIEW AllEquipment AS
SELECT e.equipmentName, e.quantity, r.roomName, m.muscleGroupName
FROM Equipment as e
JOIN Room as r 
ON e.roomID = r.roomID 
JOIN MuscleGroup as m
ON e.muscleGroupId = m.muscleGroupId;

-- -----------------------------------------------------
-- Stored Procedure for registering a new member 
-- -----------------------------------------------------
DELIMITER //
CREATE PROCEDURE new_member( IN fName VARCHAR(45), IN lName VARCHAR(45), IN dob DATETIME, IN uName VARCHAR(45), IN pWord VARCHAR(100), IN mID INT )
BEGIN 
  INSERT INTO 
    Member(firstName, lastName, dateOfBirth, joinDate, membershipId, username, password)
    VALUES (fName, lName, dob, NOW(), mID, uName, pWord);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Stored Procedure for registering a new employee 
-- -----------------------------------------------------
DELIMITER //
CREATE PROCEDURE new_employee( IN fName VARCHAR(45), IN lName VARCHAR(45), IN dob DATETIME, IN uName VARCHAR(45), IN pWord VARCHAR(100), IN phoneNum VARCHAR(45), rId INT)
BEGIN 
  INSERT INTO Employee(firstName, lastName, dateOfBirth, username, password, phoneNumber)
  VALUES (fName, lName, dob, uName, pWord, phoneNum);
  
  INSERT INTO employee_role(employeeID, roleId)
  VALUES (LAST_INSERT_ID(), rId);
END //
DELIMITER ;

-- ADD 1 STORED PROCEDURE, 1 TRANSACTION, 2 TRIGGERS

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- Transaction for enrollment:
DELIMITER //
CREATE PROCEDURE selectMyEnrolledClasses 
(
   username varchar(25)
) 
BEGIN 
   SELECT FitnessClass.fitnessClassName, FitnessClass.fitnessClassId, FitnessClass.fitnessClassType, FitnessClass.startTime, fitnessClass.endTime,
	Employee.firstName, Employee.lastName, Room.roomName, dayName, Member.username FROM gymDB.FitnessClass
	JOIN Employee on FitnessClass.employeeId = Employee.employeeId
	JOIN Room on Room.roomId = FitnessClass.roomId
	JOIN FitnessClass_Day on FitnessClass.fitnessClassId = FitnessClass_Day.fitnessClassId
	JOIN Day on FitnessClass_Day.dayId = Day.dayId
    JOIN Member_FitnessClass on FitnessClass.fitnessClassId = Member_FitnessClass.fitnessClassId
    JOIN Member ON Member.memberId = Member_FitnessClass.memberId
    WHERE Member.username = username;
    END//

DELIMITER ;

-- creating a view for showing all classes the currently logged in user
-- is enrolled in
SELECT * FROM Member_FitnessClass;
DROP PROCEDURE IF EXISTS selectMyEnrolledClasses;
DELIMITER //
CREATE PROCEDURE selectMyEnrolledClasses 
(
   username varchar(25)
) 
BEGIN 
   SELECT FitnessClass.fitnessClassName, FitnessClass.fitnessClassId, FitnessClass.fitnessClassType, FitnessClass.startTime, fitnessClass.endTime,
	Employee.firstName, Employee.lastName, Room.roomName, dayName, Member.username FROM gymDB.FitnessClass
	JOIN Employee on FitnessClass.employeeId = Employee.employeeId
	JOIN Room on Room.roomId = FitnessClass.roomId
	JOIN FitnessClass_Day on FitnessClass.fitnessClassId = FitnessClass_Day.fitnessClassId
	JOIN Day on FitnessClass_Day.dayId = Day.dayId
    JOIN Member_FitnessClass on FitnessClass.fitnessClassId = Member_FitnessClass.fitnessClassId
    JOIN Member ON Member.memberId = Member_FitnessClass.memberId
    WHERE Member.username = username;
    END//

DELIMITER ;
-- Call selectMyEnrolledClasses('cbolnyk');
-- create a view for obtaining all fitness classes
CREATE OR REPLACE VIEW View_All_Fitness_Classes AS
SELECT FitnessClass.fitnessClassId, FitnessClass.fitnessClassName, FitnessClass.fitnessClassType, FitnessClass.startTime, fitnessClass.endTime,
Employee.firstName, Employee.lastName, Room.roomName, dayName FROM gymDB.FitnessClass
JOIN Employee on FitnessClass.employeeId = Employee.employeeId
JOIN Room on Room.roomId = FitnessClass.roomId
JOIN FitnessClass_Day on FitnessClass.fitnessClassId = FitnessClass_Day.fitnessClassId
JOIN Day on FitnessClass_Day.dayId = Day.dayId;


-- create a stored procedure for filtering fitness classes by type
DELIMITER //
CREATE PROCEDURE filterByType 
(
   fitnessClassTypeToLookFor varchar(25)
) 
BEGIN 
   SELECT FitnessClass.fitnessClassId, FitnessClass.fitnessClassName, FitnessClass.fitnessClassType, FitnessClass.startTime, fitnessClass.endTime,
	Employee.firstName, Employee.lastName, Room.roomName, dayName FROM gymDB.FitnessClass
	JOIN Employee on FitnessClass.employeeId = Employee.employeeId
	JOIN Room on Room.roomId = FitnessClass.roomId
	JOIN FitnessClass_Day on FitnessClass.fitnessClassId = FitnessClass_Day.fitnessClassId
	JOIN Day on FitnessClass_Day.dayId = Day.dayId
    WHERE fitnessClassType = fitnessClassTypeToLookFor;
    END//

DELIMITER ;


-- create a stored procedure for filtering fitness classes by instructor
DELIMITER //
CREATE PROCEDURE filterByInstructor 
(
   instructorNameToLookFor varchar(25)
) 
BEGIN 
   SELECT FitnessClass.fitnessClassName, FitnessClass.fitnessClassId, FitnessClass.fitnessClassType, FitnessClass.startTime, fitnessClass.endTime,
	Employee.firstName, Employee.lastName, Room.roomName, dayName FROM gymDB.FitnessClass
	JOIN Employee on FitnessClass.employeeId = Employee.employeeId
	JOIN Room on Room.roomId = FitnessClass.roomId
	JOIN FitnessClass_Day on FitnessClass.fitnessClassId = FitnessClass_Day.fitnessClassId
	JOIN Day on FitnessClass_Day.dayId = Day.dayId
    WHERE CONCAT(Employee.firstName, ' ', Employee.lastName) = instructorNameToLookFor;
    END//

DELIMITER ;

DELIMITER //
CREATE TRIGGER RegisterAndLogInMember
AFTER INSERT ON member
FOR EACH ROW 
BEGIN 
	INSERT INTO currentuser 
    VALUES (NEW.memberId, NEW.username);
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER RegisterAndLogInEmployee
AFTER INSERT ON employee
FOR EACH ROW 
BEGIN 
	INSERT INTO currentuser 
    VALUES (NEW.employeeId, NEW.username);
END;
//
DELIMITER ;
